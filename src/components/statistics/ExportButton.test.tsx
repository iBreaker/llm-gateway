import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import '@testing-library/jest-dom'
import { ExportButton } from './ExportButton'

// Mock API client
const mockApiClient = {
  get: jest.fn()
}

jest.mock('../../utils/api', () => ({
  apiClient: mockApiClient
}))

// Mock URL.createObjectURL and document.createElement
const mockCreateObjectURL = jest.fn()
const mockClick = jest.fn()
const mockLink = {
  href: '',
  download: '',
  click: mockClick
}

Object.defineProperty(global.URL, 'createObjectURL', {
  writable: true,
  value: mockCreateObjectURL
})

const mockCreateElement = jest.fn((tagName) => {
  if (tagName === 'a') {
    return mockLink
  }
  return document.createElement(tagName)
})

Object.defineProperty(document, 'createElement', {
  writable: true,
  value: mockCreateElement
})

// Mock data
const mockData = {
  totalRequests: 1500,
  successfulRequests: 1450,
  failedRequests: 50,
  averageLatencyMs: 250,
  totalCostUsd: 75.25,
  errorRate: 0.033,
  timeSeriesData: [
    {
      timestamp: '2024-01-01T00:00:00Z',
      requests: 100,
      responseTime: 200,
      cost: 5.0,
      errorRate: 0.02
    },
    {
      timestamp: '2024-01-01T01:00:00Z',
      requests: 150,
      responseTime: 250,
      cost: 7.5,
      errorRate: 0.01
    }
  ]
}

const mockFilters = {
  timeRange: '24h',
  models: ['gpt-4'],
  status: ['success']
}

describe('ExportButton Component', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    mockApiClient.get.mockResolvedValue(mockData)
    mockCreateObjectURL.mockReturnValue('blob:mock-url')
  })

  // Âü∫Á°ÄÊ∏≤ÊüìÊµãËØï
  it('renders export button with correct text', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    expect(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')).toBeInTheDocument()
    expect(screen.getByRole('button')).toBeEnabled()
  })

  it('renders disabled button when no data provided', () => {
    render(<ExportButton data={null} filters={mockFilters} />)
    
    const button = screen.getByRole('button')
    expect(button).toBeDisabled()
    expect(button).toHaveClass('bg-gray-100', 'text-gray-400', 'cursor-not-allowed')
  })

  // ‰∏ãÊãâËèúÂçïÊµãËØï
  it('shows export options when button clicked', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    const button = screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')
    fireEvent.click(button)
    
    expect(screen.getByText('CSV Êñá‰ª∂')).toBeInTheDocument()
    expect(screen.getByText('Excel Êñá‰ª∂')).toBeInTheDocument()
    expect(screen.getByText('PDF Êä•Âëä')).toBeInTheDocument()
    expect(screen.getByText('JSON Êï∞ÊçÆ')).toBeInTheDocument()
  })

  it('hides export options when button clicked again', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    const button = screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')
    
    // ÊòæÁ§∫ÈÄâÈ°π
    fireEvent.click(button)
    expect(screen.getByText('CSV Êñá‰ª∂')).toBeInTheDocument()
    
    // ÈöêËóèÈÄâÈ°π
    fireEvent.click(button)
    expect(screen.queryByText('CSV Êñá‰ª∂')).not.toBeInTheDocument()
  })

  it('renders export format icons', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    
    expect(screen.getByText('üìä')).toBeInTheDocument() // CSV
    expect(screen.getByText('üìà')).toBeInTheDocument() // Excel
    expect(screen.getByText('üìÑ')).toBeInTheDocument() // PDF
    expect(screen.getByText('üìã')).toBeInTheDocument() // JSON
  })

  // CSVÂØºÂá∫ÊµãËØï
  it('handles CSV export with time series data', async () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockApiClient.get).toHaveBeenCalledWith('/api/stats/detailed')
    })
    
    expect(mockCreateElement).toHaveBeenCalledWith('a')
    expect(mockCreateObjectURL).toHaveBeenCalled()
    expect(mockClick).toHaveBeenCalled()
    expect(mockLink.download).toContain('.csv')
  })

  it('handles CSV export without time series data', async () => {
    const dataWithoutTimeSeries = { ...mockData, timeSeriesData: undefined }
    
    render(<ExportButton data={dataWithoutTimeSeries} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockApiClient.get).toHaveBeenCalled()
    })
    
    expect(mockClick).toHaveBeenCalled()
  })

  // JSONÂØºÂá∫ÊµãËØï
  it('handles JSON export correctly', async () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('JSON Êï∞ÊçÆ'))
    
    await waitFor(() => {
      expect(mockApiClient.get).toHaveBeenCalledWith('/api/stats/detailed')
    })
    
    expect(mockCreateElement).toHaveBeenCalledWith('a')
    expect(mockLink.download).toContain('.json')
    expect(mockClick).toHaveBeenCalled()
  })

  // ExcelÂíåPDFÂØºÂá∫ÊµãËØïÔºàÊ®°ÊãüÂäüËÉΩÔºâ
  it('shows alert for Excel export', async () => {
    const alertSpy = jest.spyOn(window, 'alert').mockImplementation()
    
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('Excel Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(alertSpy).toHaveBeenCalledWith('Excel ÂØºÂá∫ÂäüËÉΩÂºÄÂèë‰∏≠...')
    })
    
    alertSpy.mockRestore()
  })

  it('shows alert for PDF export', async () => {
    const alertSpy = jest.spyOn(window, 'alert').mockImplementation()
    
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('PDF Êä•Âëä'))
    
    await waitFor(() => {
      expect(alertSpy).toHaveBeenCalledWith('PDF ÂØºÂá∫ÂäüËÉΩÂºÄÂèë‰∏≠...')
    })
    
    alertSpy.mockRestore()
  })

  // Âä†ËΩΩÁä∂ÊÄÅÊµãËØï
  it('shows loading state during export', async () => {
    // Ê®°ÊãüÊÖ¢ÈÄüAPIË∞ÉÁî®
    mockApiClient.get.mockImplementation(() => 
      new Promise(resolve => setTimeout(() => resolve(mockData), 100))
    )
    
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    // Ê£ÄÊü•Âä†ËΩΩÁä∂ÊÄÅ
    expect(screen.getByText('ÂØºÂá∫‰∏≠...')).toBeInTheDocument()
    expect(screen.getByRole('button')).toBeDisabled()
    
    // Á≠âÂæÖÂÆåÊàê
    await waitFor(() => {
      expect(screen.queryByText('ÂØºÂá∫‰∏≠...')).not.toBeInTheDocument()
    }, { timeout: 200 })
    
    expect(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')).toBeInTheDocument()
  })

  it('hides options menu during export', async () => {
    mockApiClient.get.mockImplementation(() => 
      new Promise(resolve => setTimeout(() => resolve(mockData), 50))
    )
    
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    // ‰∏ãÊãâËèúÂçïÂ∫îËØ•Ë¢´ÈöêËóè
    expect(screen.queryByText('CSV Êñá‰ª∂')).not.toBeInTheDocument()
    
    await waitFor(() => {
      expect(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')).toBeInTheDocument()
    }, { timeout: 100 })
  })

  // ÈîôËØØÂ§ÑÁêÜÊµãËØï
  it('handles export API error gracefully', async () => {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation()
    const alertSpy = jest.spyOn(window, 'alert').mockImplementation()
    
    mockApiClient.get.mockRejectedValue(new Error('API Error'))
    
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith('ÂØºÂá∫Â§±Ë¥•:', expect.any(Error))
      expect(alertSpy).toHaveBeenCalledWith('ÂØºÂá∫Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    })
    
    // Â∫îËØ•ÊÅ¢Â§çÂà∞Ê≠£Â∏∏Áä∂ÊÄÅ
    expect(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')).toBeInTheDocument()
    expect(screen.getByRole('button')).toBeEnabled()
    
    consoleSpy.mockRestore()
    alertSpy.mockRestore()
  })

  // Â§ñÈÉ®ÁÇπÂáªÂÖ≥Èó≠ÊµãËØï
  it('closes dropdown when clicking outside', () => {
    const { container } = render(<ExportButton data={mockData} filters={mockFilters} />)
    
    // ÊâìÂºÄ‰∏ãÊãâËèúÂçï
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    expect(screen.getByText('CSV Êñá‰ª∂')).toBeInTheDocument()
    
    // ÁÇπÂáªÂ§ñÈÉ®Ë¶ÜÁõñÂ±Ç
    const overlay = container.querySelector('.fixed.inset-0')
    fireEvent.click(overlay!)
    
    // ‰∏ãÊãâËèúÂçïÂ∫îËØ•ÂÖ≥Èó≠
    expect(screen.queryByText('CSV Êñá‰ª∂')).not.toBeInTheDocument()
  })

  // Êï∞ÊçÆÂ§ÑÁêÜÊµãËØï
  it('handles empty data gracefully', () => {
    render(<ExportButton data={{}} filters={mockFilters} />)
    
    const button = screen.getByRole('button')
    expect(button).toBeEnabled() // Á©∫ÂØπË±°‰ªçÁÑ∂Ë¢´ËÆ§‰∏∫ÊòØÊúâÊïàÊï∞ÊçÆ
  })

  it('handles null time series data in CSV export', async () => {
    const dataWithNullTimeSeries = { 
      ...mockData, 
      timeSeriesData: null 
    }
    
    mockApiClient.get.mockResolvedValue(dataWithNullTimeSeries)
    
    render(<ExportButton data={dataWithNullTimeSeries} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockClick).toHaveBeenCalled()
    })
  })

  // Êñá‰ª∂ÂêçÁîüÊàêÊµãËØï
  it('generates correct CSV filename', async () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockLink.download).toContain('.csv')
    })
  })

  it('generates correct JSON filename', async () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('JSON Êï∞ÊçÆ'))
    
    await waitFor(() => {
      expect(mockLink.download).toContain('.json')
    })
  })

  // CSVÂÜÖÂÆπÊ†ºÂºèÊµãËØï
  it('includes BOM in CSV content for proper UTF-8 encoding', async () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockCreateObjectURL).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'text/csv;charset=utf-8;'
        })
      )
    })
  })

  // ÂèØËÆøÈóÆÊÄßÊµãËØï
  it('has proper ARIA attributes when disabled', () => {
    render(<ExportButton data={null} filters={mockFilters} />)
    
    const button = screen.getByRole('button')
    expect(button).toBeDisabled()
    expect(button).toHaveAttribute('disabled')
  })

  it('maintains focus management in dropdown', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    const mainButton = screen.getByText('ÂØºÂá∫Êï∞ÊçÆ')
    fireEvent.click(mainButton)
    
    const csvButton = screen.getByText('CSV Êñá‰ª∂')
    expect(csvButton).toBeInTheDocument()
    expect(csvButton.tagName).toBe('BUTTON') // Á°Æ‰øùÊòØÂèØËÅöÁÑ¶ÁöÑÊåâÈíÆ
  })

  // ËæπÁïåÊÉÖÂÜµÊµãËØï
  it('handles missing data fields in time series', async () => {
    const incompleteData = {
      timeSeriesData: [
        { timestamp: '2024-01-01T00:00:00Z' }, // Áº∫Â∞ëÂÖ∂‰ªñÂ≠óÊÆµ
        { requests: 100 } // Áº∫Â∞ëÊó∂Èó¥Êà≥
      ]
    }
    
    mockApiClient.get.mockResolvedValue(incompleteData)
    
    render(<ExportButton data={incompleteData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    fireEvent.click(screen.getByText('CSV Êñá‰ª∂'))
    
    await waitFor(() => {
      expect(mockClick).toHaveBeenCalled()
    })
  })

  it('displays helper text in dropdown', () => {
    render(<ExportButton data={mockData} filters={mockFilters} />)
    
    fireEvent.click(screen.getByText('ÂØºÂá∫Êï∞ÊçÆ'))
    
    expect(screen.getByText('ÂØºÂá∫ÂΩìÂâçÁ≠õÈÄâÁöÑÊï∞ÊçÆ')).toBeInTheDocument()
  })
})