// 改进后的 Prisma Schema 设计
// 解决现有问题并增加必要功能

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// 用户角色枚举
enum UserRole {
  ADMIN // 系统管理员
  USER // 普通用户
  READONLY // 只读用户
}

// 上游账号类型枚举
enum UpstreamType {
  CLAUDE_CODE // Claude Code CLI 账号
  GEMINI_CLI // Gemini CLI 账号
  ANTHROPIC_API // Anthropic API 直接调用
  OPENAI_API // OpenAI API (预留)
  AZURE_OPENAI // Azure OpenAI (预留)
  GOOGLE_AI // Google AI Platform (预留)
}

// 账号状态枚举
enum AccountStatus {
  ACTIVE
  INACTIVE
  ERROR
  PENDING
}

model User {
  id           BigInt   @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(USER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关系
  apiKeys          ApiKey[]
  upstreamAccounts UpstreamAccount[] // 添加管理员关联

  @@map("users")
}

model ApiKey {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt    @map("user_id")
  name         String
  keyHash      String    @unique @map("key_hash")
  permissions  Json      @default("[]")
  // 添加限流配置
  rateLimits   Json      @default("{}") @map("rate_limits") // {"per_minute": 100, "per_hour": 1000}
  isActive     Boolean   @default(true) @map("is_active")
  expiresAt    DateTime? @map("expires_at")
  lastUsedAt   DateTime? @map("last_used_at")
  requestCount BigInt    @default(0) @map("request_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords UsageRecord[]

  @@map("api_keys")
}

model UpstreamAccount {
  id              BigInt        @id @default(autoincrement())
  userId          BigInt        @map("user_id") // 添加管理员关联
  name            String // 账号显示名称
  type            UpstreamType
  email           String?
  credentials     Json // 加密存储的凭据
  config          Json          @default("{}") // 配置项：超时、重试等
  status          AccountStatus @default(PENDING)
  priority        Int           @default(1)
  weight          Int           @default(100)
  // 健康检查相关
  lastHealthCheck DateTime?     @map("last_health_check")
  healthStatus    Json          @default("{}") @map("health_status")
  // 统计信息
  lastUsedAt      DateTime?     @map("last_used_at")
  requestCount    BigInt        @default(0) @map("request_count")
  successCount    BigInt        @default(0) @map("success_count")
  errorCount      BigInt        @default(0) @map("error_count")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords UsageRecord[]
  healthChecks HealthCheck[] // 添加健康检查历史

  @@map("upstream_accounts")
}

model UsageRecord {
  id                BigInt   @id @default(autoincrement())
  apiKeyId          BigInt   @map("api_key_id")
  upstreamAccountId BigInt?  @map("upstream_account_id")
  requestId         String   @unique @map("request_id")
  method            String
  endpoint          String
  model             String?  // 添加模型字段存储实际使用的模型
  statusCode        Int?     @map("status_code")
  responseTime      Int?     @map("response_time") // 毫秒
  // Token 详细信息
  inputTokens       BigInt   @default(0) @map("input_tokens")
  outputTokens      BigInt   @default(0) @map("output_tokens")
  cacheCreationInputTokens BigInt @default(0) @map("cache_creation_input_tokens")
  cacheReadInputTokens     BigInt @default(0) @map("cache_read_input_tokens")
  tokensUsed        BigInt   @default(0) @map("tokens_used") // 总计，保持向后兼容
  cost              Decimal  @default(0) @db.Decimal(10, 4)
  errorMessage      String?  @map("error_message")
  // 添加更多上下文信息
  userAgent         String?  @map("user_agent")
  clientIp          String?  @map("client_ip")
  createdAt         DateTime @default(now()) @map("created_at")

  apiKey          ApiKey           @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  upstreamAccount UpstreamAccount? @relation(fields: [upstreamAccountId], references: [id], onDelete: SetNull)

  // 添加索引优化查询性能
  @@index([apiKeyId, createdAt])
  @@index([upstreamAccountId, createdAt])
  @@index([createdAt])
  @@map("usage_records")
}

// 新增：健康检查历史表
model HealthCheck {
  id                BigInt   @id @default(autoincrement())
  upstreamAccountId BigInt   @map("upstream_account_id")
  status            String // "success", "error", "timeout"
  responseTime      Int?     @map("response_time") // 毫秒
  errorMessage      String?  @map("error_message")
  details           Json     @default("{}") // 详细检查结果
  createdAt         DateTime @default(now()) @map("created_at")

  upstreamAccount UpstreamAccount @relation(fields: [upstreamAccountId], references: [id], onDelete: Cascade)

  @@index([upstreamAccountId, createdAt])
  @@map("health_checks")
}

// 新增：系统配置表
model SystemConfig {
  id        BigInt   @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
}

// 新增：审计日志表（用于合规）
model AuditLog {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt?  @map("user_id")
  action     String // "create", "update", "delete", "login", etc.
  resource   String // "api_key", "upstream_account", etc.
  resourceId String?  @map("resource_id")
  details    Json     @default("{}")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}
